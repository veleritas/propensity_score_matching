Timer unit: 1e-06 s

Total time: 20.1817 s
File: <ipython-input-15-7bf3c6a20cc1>
Function: match_pairs_dev4 at line 7

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     7                                           def match_pairs_dev4(people, caliper=0.05):
     8                                               
     9         1          4.0      4.0      0.0      PRECISION = 1000000
    10         1          6.0      6.0      0.0      MAX_DIST = int(caliper * PRECISION)
    11                                               
    12         1          6.0      6.0      0.0      scores = people.assign(
    13         1      31180.0  31180.0      0.2          prop_score = lambda df: np.floor(df["pred_prob"].mul(PRECISION)).astype(np.uint32)
    14                                               )
    15                                               
    16         1      64901.0  64901.0      0.3      neg_ppl = scores.query("used_drug == 0")[["MMI_ID", "prop_score"]]
    17                                               
    18                                               
    19         1     543426.0 543426.0      2.7      neg_scores = SortedList(neg_ppl["prop_score"])
    20                                               
    21         1          4.0      4.0      0.0      matched_scores = []
    22         1      18166.0  18166.0      0.1      pos_ppl = scores.query("used_drug == 1")[["MMI_ID", "prop_score"]]
    23                                               
    24                                               
    25    250001     643648.0      2.6      3.2      for row in pos_ppl.itertuples():
    26                                                   
    27    250000     275662.0      1.1      1.4          if not neg_scores:
    28                                                       break
    29                                                   
    30    250000     199156.0      0.8      1.0          target = row.prop_score
    31                                                   
    32    250000     176520.0      0.7      0.9          closest_val = None        
    33                                                   
    34    250000    2511108.0     10.0     12.4          idx = neg_scores.bisect_left(target)
    35                                                   
    36    250000     299130.0      1.2      1.5          if idx == len(neg_scores):
    37     40482     143836.0      3.6      0.7              closest_val = neg_scores[-1]
    38    209518     158966.0      0.8      0.8          elif idx == 0:
    39                                                       closest_val = neg_scores[0]
    40                                           
    41                                                       
    42    250000     185452.0      0.7      0.9          if closest_val is None:
    43    209518    3705551.0     17.7     18.4              cur_val = neg_scores[idx]
    44    209518    3566202.0     17.0     17.7              prev_val = neg_scores[idx - 1]
    45                                                       
    46    209518     179151.0      0.9      0.9              if (target - prev_val) < (cur_val - target):
    47     40224      29423.0      0.7      0.1                  closest_val = prev_val
    48                                                       else:
    49    169294     124385.0      0.7      0.6                  closest_val = cur_val
    50                                                           
    51    250000     227846.0      0.9      1.1          if abs(target - closest_val) > MAX_DIST:
    52     27662      19464.0      0.7      0.1              continue
    53                                                       
    54    222338    3230438.0     14.5     16.0          neg_scores.remove(closest_val)
    55                                                   
    56    222338     213001.0      1.0      1.1          matched_scores.append((row.MMI_ID, closest_val))
    57                                                   
    58         1          2.0      2.0      0.0      neg_ppl_list = defaultdict(list)
    59    750001    1735469.0      2.3      8.6      for row in neg_ppl.itertuples():
    60    750000     995043.0      1.3      4.9          neg_ppl_list[row.prop_score].append(row.MMI_ID)
    61                                                   
    62         1          2.0      2.0      0.0      matched_pairs = []
    63    222339     259485.0      1.2      1.3      for pos_person, pscore in matched_scores:
    64    222338     307033.0      1.4      1.5          neg_person = neg_ppl_list[pscore].pop()
    65                                                   
    66    222338     210169.0      0.9      1.0          matched_pairs.append((pos_person, neg_person))
    67                                                   
    68         1          3.0      3.0      0.0      final = pd.DataFrame(
    69         1     127854.0 127854.0      0.6          matched_pairs, columns=["MMI_ID", "matched_person"]
    70                                               )
    71                                               
    72         1          2.0      2.0      0.0      return final