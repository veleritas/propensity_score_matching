Timer unit: 1e-06 s

Total time: 20.3573 s
File: <ipython-input-12-9f0f304489bc>
Function: match_pairs_dev3 at line 5

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     5                                           def match_pairs_dev3(people, caliper=0.05):
     6                                               
     7         1          1.0      1.0      0.0      PRECISION = 1000000
     8         1          3.0      3.0      0.0      MAX_DIST = int(caliper * PRECISION)
     9                                               
    10         1          2.0      2.0      0.0      scores = people.assign(
    11         1      22359.0  22359.0      0.1          prop_score = lambda df: np.floor(df["pred_prob"].mul(PRECISION)).astype(np.uint32)
    12                                               )
    13                                               
    14         1      42513.0  42513.0      0.2      neg_ppl = scores.query("used_drug == 0")
    15                                               
    16         1     552082.0 552082.0      2.7      neg_scores = SortedList(neg_ppl["prop_score"])
    17                                               
    18         1          3.0      3.0      0.0      matched_scores = []
    19         1      15072.0  15072.0      0.1      pos_ppl = scores.query("used_drug == 1")
    20                                               
    21                                               
    22    250001     697884.0      2.8      3.4      for row in pos_ppl.itertuples():
    23                                                   
    24                                                   
    25    250000     276779.0      1.1      1.4          if not neg_scores:
    26                                                       break
    27                                                   
    28                                                   
    29                                                   
    30    250000     200720.0      0.8      1.0          target = row.prop_score
    31                                                   
    32                                                   
    33    250000     174910.0      0.7      0.9          closest_val = None        
    34                                                   
    35                                                           
    36    250000    2517589.0     10.1     12.4          idx = neg_scores.bisect_left(target)
    37                                                   
    38                                                   
    39    250000     300199.0      1.2      1.5          if idx == len(neg_scores):
    40     40482     142820.0      3.5      0.7              closest_val = neg_scores[-1]
    41    209518     156856.0      0.7      0.8          elif idx == 0:
    42                                                       closest_val = neg_scores[0]
    43                                           
    44                                                       
    45    250000     182948.0      0.7      0.9          if closest_val is None:
    46    209518    3699293.0     17.7     18.2              cur_val = neg_scores[idx]
    47    209518    3557647.0     17.0     17.5              prev_val = neg_scores[idx - 1]
    48                                                       
    49    209518     177542.0      0.8      0.9              if (target - prev_val) < (cur_val - target):
    50     40224      28793.0      0.7      0.1                  closest_val = prev_val
    51                                                       else:
    52    169294     121581.0      0.7      0.6                  closest_val = cur_val
    53                                                           
    54    250000     221859.0      0.9      1.1          if abs(target - closest_val) > MAX_DIST:
    55     27662      18945.0      0.7      0.1              continue
    56                                                       
    57    222338    3226399.0     14.5     15.8          neg_scores.remove(closest_val)
    58                                                   
    59    222338     215491.0      1.0      1.1          matched_scores.append((row.MMI_ID, closest_val))
    60                                                   
    61         1          2.0      2.0      0.0      neg_ppl_list = defaultdict(list)
    62    750001    1890239.0      2.5      9.3      for row in neg_ppl.itertuples():
    63    750000    1012198.0      1.3      5.0          neg_ppl_list[row.prop_score].append(row.MMI_ID)
    64                                                   
    65         1          3.0      3.0      0.0      matched_pairs = []
    66    222339     254632.0      1.1      1.3      for pos_person, pscore in matched_scores:
    67    222338     307944.0      1.4      1.5          neg_person = neg_ppl_list[pscore].pop()
    68                                                   
    69    222338     206390.0      0.9      1.0          matched_pairs.append((pos_person, neg_person))
    70                                                   
    71         1          3.0      3.0      0.0      final = pd.DataFrame(
    72         1     135553.0 135553.0      0.7          matched_pairs, columns=["MMI_ID", "matched_person"]
    73                                               )
    74                                               
    75         1          5.0      5.0      0.0      return final